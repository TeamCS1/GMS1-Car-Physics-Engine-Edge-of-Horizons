<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_car</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init vars
steer=0;
longVel=0;
wheelSpin=0;
rearWheelSpin=0;
frontWeight=0;
velDir=0;
brake=0;
longVelPrevious=0;
phy_speed_xprevious=0;
phy_speed_yprevious=0;
cp=0;//angle of the contact patch
alarm[0]=1;

horsePower=1.5; // 1 is a family car. 2 is a fast car.
maxSteer=35; //55 for a driftmobile. 35 for a race car.
racingSteering = 1;
mouseSteering = 0;

//these variables are related to the tire placement.
frontLongSep=sprite_height*.25+3.5;//distance between midpoint and front wheels
rearLongSep=sprite_height*.25+1.5;//distance between midpoint and back wheels
frontLatSep=sprite_width/2-6;//distance from hood to the left or right front wheel
rearLatSep=sprite_width/2-6.5;//distance from trunk to the left or right back wheel

physics_mass_properties(phy_mass,0,-1,phy_inertia); //set local_center_of_mass_y to zero for a mid engine car. The higher the number the further back the weight of the engine is. Put it to - for weight in the Front
weightFactorZ=3; //Put this to a higher amount for top heavy cars. Put it to zero if the car is a flat chassis.

//these variables are related to the traction.
frontCamber=2; //The bigger the camber the more it digs into the ground turning.
rearCamber=2; 
sideWall=.03; //Prevent the car from spinout, and make drifting less likely to spin out the car.

frontGrip=.75; //Put this to higher for easier steering.
rearGrip=.8;//if car Fishtails too much, put this (rearGrip) higher.
weightFactor=.25; //if you put this to zero, braking will not put the car into a fishtail. In real life when you brake you should fishtail, so you can get into a drift.

topSpeedish=130 //topSpeedish is related to top speed. 100 is a top speed of 125 ish. 

phy_bullet=true; //make sure the car never tunnels through objects

dir=-phy_rotation-90;
CalculateTirePositions(); //get tire point xys
var frontX=(tfl_x+tfr_x)/2;
var frontY=(tfl_y+tfr_y)/2;
var backX=(tbl_x+tbr_x)/2;
var backY=(tbl_y+tbr_y)/2;


//create tires
tf=instance_create(frontX,frontY,o_tire) with tf {par=other.id;}
tfJ=physics_joint_revolute_create(tf,id,frontX,frontY,-90,90,1,0,0,0,0)

tb=instance_create(backX,backY,o_tire) with tb {par=other.id;}
tbJ=physics_joint_revolute_create(tb,id,backX,backY,0,0,1,0,0,0,0)

drive=0//0=rear wheel drive, 1=front wheel drive, 2=all wheel drive. Best Drift car is rwd

if global.threeD
    {
    tex=sprite_get_texture(sp_carTex,0);
    envSurf=surface_create(512,512);
    envTex=sprite_get_texture(sp_envMap,0);
    worldTex=background_get_texture(bg_grid);
    worldTex2=background_get_texture(bg_concrete);
    texTire=sprite_get_texture(sp_tireTex,0);
    susY=0; //forward suspension
    susX=0; //lateral suspension   
    background_visible[0]=false;
    d3d_light_define_direction(0,0,0,-100,c_white);
    d3d_light_enable(0,1);
    susVelX=0;
    susVelY=0; 
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(freeMusic,0,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_house_high_rise_2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>camera.shake=(random(mph/2)+mph/2)/10; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_house_high_rise">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>camera.shake=(random(mph/2)+mph/2)/10; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_oak_tree">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>camera.shake=(random(mph/2)+mph/2)/10; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_cone">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with other sprite_index=sp_coneFallen;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_wall">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>camera.shake=(random(mph/2)+mph/2)/10; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gx,gy;
gx=display_get_gui_width();
gy=display_get_gui_height();
//debug info
draw_set_colour(c_white);
draw_text(32,30,"FPS:"+string(fps))
draw_text(32,50,"Camera Height: "+string(camera.cameraHeight))
draw_text(32,70,"Camera Angle: "+string(camera.cameraAngle))
draw_text(32,90,"Racing Steering Press 1: "+string(racingSteering))
draw_text(32,110,"Drift Steering Press 2: "+string(racingSteering))
draw_text(32,130,"Keyboard Steering Press 3: "+string(mouseSteering))
draw_text(32,150,"Mouse Steering Press 4: "+string(mouseSteering))

draw_text(gx-200,gy-32,"R key to Restart.");
draw_text_shadow(gx-150,gy-200,"MPH:"+string(round(mph)));
//draw steering wheel
//draw_sprite(sp_steering,1,gx/2,gy-128);
//draw_sprite_ext(sp_steering,0,gx/2,gy-128,1,1,steer*3.5,c_white,1);
//draw car
draw_sprite(sp_carHud,0,gx-200,gy-100);
draw_sprite(sp_carHud,1,gx-200,gy-100);


//draw weight
var c1,c2; c1=merge_color(c_white,c_black,max(frontWeight,0)); c2=merge_color(c_black,c_white,1+min(frontWeight,0));
draw_sprite_general(sp_carSideHud, 0, 0, 0, 190,80, gx-200,gy-300, 1,1, 0, c1, c2, c2, c1, 1);
var c;
if frontWeight&lt;0 c=c_lime; else c=c_red;
draw_line_color(gx-200-frontWeight*300+95,gy-300+40,gx-200+95,gy-300+40,c,c)


//environment mapping - See tutorial for more help.
if global.threeD 
{
if !surface_exists(envSurf)
    envSurf=surface_create(512,512);
else 
{
d3d_set_fog(0,0,0,0);d3d_set_lighting(0);d3d_set_culling(0);
surface_set_target(envSurf);
draw_sprite(sp_carTex,0,0,0);
u=phy_rotation/360;
v=point_distance(0,0,x,y)/2000;
draw_set_blend_mode(bm_max);
draw_primitive_begin_texture(pr_trianglelist,envTex);
draw_vertex_texture(0,0,u,v);
draw_vertex_texture(512,0,u+1,v);
draw_vertex_texture(512,512,u+1,v+1);
draw_primitive_end();
draw_primitive_begin_texture(pr_trianglelist,envTex);
draw_vertex_texture(0,0,u,v);
draw_vertex_texture(0,512,u,v+1);
draw_vertex_texture(512,512,u+1,v+1);
draw_primitive_end();draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_sprite(sp_carTexNonSpec,keyboard_check(ord("S")),0,0);//Give the lights and engine no specular effect
surface_reset_target();
tex=surface_get_texture(envSurf);
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_lighting(1);




dir=-phy_rotation-90;
mph=ConvertToMph(phy_speed); //convert Pixels to mph

//steering/////////////////////
{
if mouseSteering
    steer=(display_get_width()/2-display_mouse_get_x())/6;
else
    {
    steer+=(keyboard_check(ord("A"))-keyboard_check(ord("D")))*2;
    if !keyboard_check(ord("A")) if !keyboard_check(ord("D"))
        steer*=.9;
    }
}
if longVel&gt;0
steer=lerp(steer,-angle_difference(dir,velDir)*(1-brake),mph/1000);//the faster the car goes, the more the steer lerps to being parralel with the velocity Angle, also, the more force it takes to move the steering wheel
    //if brake, lerp the wheel dir to Center. If reversing, do not lerp the steer.

if !racingSteering
steer=clamp(steer,-maxSteer,maxSteer); //clamp the tire angle
else {
var ratio=min(1,abs(angle_difference(dir,velDir))/50);//the ratio of it drifting. The more out of control (drifting) it is, the higher the ratio.
steer=clamp(steer,-maxSteer/(1+mph/20)*(1-ratio)-maxSteer*ratio,maxSteer/(1+mph/20)*(1-ratio)+maxSteer*ratio) //if racingSteering is enabled then add a kind of virtual "force feedback" to the steering wheel clamping it from hard turns.

}
cp=lerp(cp,steer,1/(1+mph/5)); //rotate the contact patch rubber towards the tire angle

physics_joint_set_value(tfJ, phy_joint_upper_angle_limit,cp)//rotate the tire joint
physics_joint_set_value(tfJ, phy_joint_lower_angle_limit,cp)
//////////////////////////////




//data///////////////////////////////////////////
velDir=point_direction(0,0,phy_speed_x,phy_speed_y)+180; //direction the car is going
//latVel=dot_product(lengthdir_x(1,dir-90),lengthdir_y(1,dir-90),lengthdir_x(phy_speed,velDir+180),lengthdir_y(phy_speed,velDir+180)); //latitudal velocity, in pixels
longVel=-dot_product(lengthdir_x(1,dir),lengthdir_y(1,dir),lengthdir_x(phy_speed,velDir+180),lengthdir_y(phy_speed,velDir+180)); //longitudal velocity, in pixels
////////////////////////////////////////
CalculateTirePositions();
phy_angular_velocity/=1+sin(degtorad(abs(angle_difference(dir,velDir))))*sideWall; //when about to spin out, just increase the sideWall so it never spins out that uncontrollably.
                                                                                 //think of it like the sides of the tires "digging in" to the concrete or dirt

//gas and brake//////////////////////////////
speedLimiter=1+mph/topSpeedish; //the faster it goes, the harder to accelerate or break. 
var inst=tb; //rear wheel drive
if drive==1
    inst=tf; //front wheel drive
if drive==2
    speedLimiter*=2.01; //reduce strength of both wheels by 2.01.
repeat (max(1,drive)) //if all wheel drive, repeat this twice, otherwise only once
{
with inst
{
if keyboard_check(ord("W"))
    {
    
    if other.longVel&lt;0 {//brake
    phy_speed_x+=lengthdir_x(-other.horsePower/12/other.speedLimiter,other.dir);
    phy_speed_y+=lengthdir_y(-other.horsePower/12/other.speedLimiter,other.dir);    
    } else
    //push the car forward. Negative because negative Y=north in GM coordinate system. Positive would equal a force to the rear.
    {phy_speed_x+=lengthdir_x(-other.horsePower/3/other.speedLimiter,other.dir);
    phy_speed_y+=lengthdir_y(-other.horsePower/3/other.speedLimiter,other.dir);}
    }
    
if keyboard_check(ord("S"))
    {
    //push the car backward.
    if other.longVel&gt;0 {
    phy_speed_x-=lengthdir_x(-other.horsePower/12/other.speedLimiter,other.dir);
    phy_speed_y-=lengthdir_y(-other.horsePower/12/other.speedLimiter,other.dir);
     //if braking and not in reverse
        other.brake=random(.25); //anti lock brakes are slightly random
            } else {
    phy_speed_x-=lengthdir_x(-other.horsePower/5/other.speedLimiter,other.dir);
    phy_speed_y-=lengthdir_y(-other.horsePower/5/other.speedLimiter,other.dir);
            }
            
    }
}
inst=tf;
}

//lateral grip
with tf
{
doTireLat(other.frontGrip*(1+other.frontWeight*other.weightFactor)*(1+abs(phy_angular_velocity)/3000*other.frontCamber));
}
with tb
{
doTireLat(other.rearGrip*(1-other.frontWeight*other.weightFactor)*(1+abs(phy_angular_velocity)/3000*other.rearCamber));
}
////////////////////////////////////////////////////////
brake*=.5;
if keyboard_check(ord('E')) //drifting/E-brake
    {
    brake=1;
    }




frontWeight=clamp((longVelPrevious-longVel)*weightFactorZ,-.99,.99);



//Draw the car
if global.threeD
{
d3d_set_fog(1,make_color_rgb(0,128,255),1000,5000);
var pdist,pdir;
pdist=point_distance(phy_speed_x,phy_speed_y,phy_speed_xprevious,phy_speed_yprevious);
pdir=angle_difference(image_angle,point_direction(phy_speed_x,phy_speed_y,phy_speed_xprevious,phy_speed_yprevious));
longVelPrevious=longVel;
phy_speed_xprevious=phy_speed_x;
phy_speed_yprevious=phy_speed_y;
susVelX+=lengthdir_x(pdist,pdir)/2; //push spring based on momentum
susVelX-=susX/20; //push spring back to center
susX+=susVelX; //lateral suspension
susX=clamp(susX,-20,20); //make the chassis rotate no further than 20 degrees laterally
susVelY+=lengthdir_y(pdist,pdir)*2;
susVelY-=susY/20; //push spring back to center
susY+=susVelY; 
susY=clamp(susY,-10,10); //make the chassis rotate no further than 10 degrees longitudally
susVelX*=.81; //Set this to a high value, but no higher than 1, if you want it to take forever to dampen the suspension's oscillation. Set it to a small value for fake looking suspension
susVelY*=.82;
d3d_transform_add_rotation_x(-susY);
d3d_transform_add_rotation_y(-susX);
d3d_transform_add_rotation_z(image_angle);
d3d_transform_add_translation(x,y,0); 
d3d_set_culling(0);//Normally the culling would be set to 1, however, the model has a couple backfaces flipped incorrectly.
texture_set_repeat(1)
d3d_set_lighting(1);
//d3d_light_define_ambient(c_ltgray);
d3d_model_draw(global.m_car,0,0,camera.cameraHeight - 18,tex);//chassis

if keyboard_check(ord("S")) //brake Lights
    {
    var rearLight=d3d_transform_vertex(sprite_width/2-8, sprite_height/2-1, 10.5);
    global.Z=rearLight[2];
    with instance_create(rearLight[0],rearLight[1],fx_redlight) z=global.Z;
    
    rearLight=d3d_transform_vertex(-sprite_width/2+8, sprite_height/2-1, 10.5);
    global.Z=rearLight[2];
    with instance_create(rearLight[0],rearLight[1],fx_redlight) z=global.Z;}
    
d3d_transform_add_scaling(1,1,-1);
d3d_model_draw(global.m_car,0,0,0,tex);d3d_set_culling(1);//chassis reflection

wheelSpin+=longVel*10;//spin front wheels
//front wheels
var m3=matrix_build(-frontLatSep,-frontLongSep,.25,wheelSpin,0,steer+180,.95,.95,.95);////tilt steering wheels
matrix_set(matrix_world,m3);
d3d_transform_add_rotation_y(-frontCamber);//right front
d3d_transform_add_rotation_z(image_angle);
d3d_transform_add_translation(x,y,4-sin(degtorad(frontCamber))*7);
d3d_model_draw(global.m_wheel,0,0,0,texTire);
d3d_transform_add_scaling(1,1,-1);d3d_set_culling(0);
d3d_model_draw(global.m_wheel,0,0,0,texTire);d3d_set_culling(1);//reflection
m3=matrix_build(frontLatSep,-frontLongSep,.25,-wheelSpin,0,steer,.95,.95,.95);////tilt steering wheels
matrix_set(matrix_world,m3);
d3d_transform_add_rotation_y(frontCamber);//left front
d3d_transform_add_rotation_z(image_angle);
d3d_transform_add_translation(x,y,4-sin(degtorad(frontCamber))*7);
d3d_model_draw(global.m_wheel,0,0,0,texTire);
d3d_transform_add_scaling(1,1,-1);d3d_set_culling(0);
d3d_model_draw(global.m_wheel,0,0,0,texTire);d3d_set_culling(1);//reflection\
rearWheelSpin+=longVel*10;//spin rear wheels
////rear wheels
m3=matrix_build(-rearLatSep,rearLongSep,.25,rearWheelSpin,0,180,.95,.95,.95);
matrix_set(matrix_world,m3);
d3d_transform_add_rotation_y(-rearCamber);
d3d_transform_add_rotation_z(image_angle);
d3d_transform_add_translation(x,y,4-sin(degtorad(rearCamber))*7);
d3d_model_draw(global.m_wheel,0,0,0,texTire);
d3d_transform_add_scaling(1,1,-1);d3d_set_culling(0);
d3d_model_draw(global.m_wheel,0,0,0,texTire);d3d_set_culling(1);//reflection
m3=matrix_build(rearLatSep,rearLongSep,.25,-rearWheelSpin,0,0,.95,.95,.95);
matrix_set(matrix_world,m3);
d3d_transform_add_rotation_y(rearCamber);
d3d_transform_add_rotation_z(image_angle);
d3d_transform_add_translation(x,y,4-sin(degtorad(rearCamber))*7);
d3d_model_draw(global.m_wheel,0,0,0,texTire);
d3d_transform_add_scaling(1,1,-1);d3d_set_culling(0);
d3d_model_draw(global.m_wheel,0,0,0,texTire);d3d_set_culling(1);//reflection
d3d_transform_set_identity();

draw_set_alpha(.5) //draw world floor
d3d_draw_floor(0,room_height,0,room_width,0,0,worldTex,room_width/64,room_height/64);
d3d_draw_floor(0,room_height,0,room_width,0,0,worldTex2,room_width/512,room_height/512);
draw_set_alpha(1);
}
else
{
//2d mode
draw_self();

//draw tires
draw_sprite_ext(sp_tire,0,tfl_x,tfl_y,1,1,image_angle+steer,c_white,1);
draw_sprite_ext(sp_tire,0,tfr_x,tfr_y,1,1,image_angle+steer,c_white,1);
draw_sprite_ext(sp_tire,0,tbl_x,tbl_y,1,1,image_angle,c_white,1);
draw_sprite_ext(sp_tire,0,tbr_x,tbr_y,1,1,image_angle,c_white,1);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="10" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseSteering = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouseSteering = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>racingSteering = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>racingSteering = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>12</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.00100000004749745</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
